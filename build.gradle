group 'gq.erokhin'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'application'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.postgresql:postgresql:42.1.4'
    }
}

repositories {
    jcenter()
}

ext {
    pgPort = project.findProperty('pgPort') as Integer ?: 54321
    pgDockerName = project.findProperty('pgDockerName') ?: 'pg_zq_test'
}

sourceSets {
    common { groovy.srcDirs = ['src/test/_common'] }
    apiTests { groovy.srcDirs = ['src/test/api'] }
    loadTests { groovy.srcDirs = ['src/test/load'] }
    performanceTests { groovy.srcDirs = ['src/test/performance'] }
}

configurations {
    commonCompile.extendsFrom(compile)
    apiTestsCompile.extendsFrom(testCompile)
    loadTestsCompile.extendsFrom(testCompile)
    performanceTestsCompile.extendsFrom(testCompile)
    performanceTestsRuntime.extendsFrom(testRuntime)
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.10'
    compile 'org.spockframework:spock-core:1.1-groovy-2.4'
    compile 'com.zaxxer:HikariCP:2.7.2'
    compile 'org.codehaus.gpars:gpars:1.2.1'

    testCompile sourceSets.common.output

    performanceTestsCompile 'io.dropwizard.metrics:metrics-core:3.2.3'
    performanceTestsCompile 'commons-cli:commons-cli:1.4'

    testRuntime 'org.postgresql:postgresql:42.1.4'
}

task startPostgres(type: Exec) {
    description "Starts latest PostgreSQL for testing"

    commandLine "bash", "-c", """
        echo Removing old test container
        docker ps -q -a -f name=${project.ext.pgDockerName} | xargs docker rm -f && 
        echo Starting new PostgreSQL container
        docker run --name ${project.ext.pgDockerName} -p ${project.ext.pgPort}:5432 -i -t -d postgres:latest &&
        echo Waiting for PostgreSQL to be ready
        docker ps -q -a -f name=${project.ext.pgDockerName} | xargs docker logs -f | grep -q 'PostgreSQL init process complete; ready for start up.' &&
        sleep 1s
        echo PostgreSQL container started
    """
}

task applySQL() {
    description "Apply zq sql scripts on database"

    shouldRunAfter startPostgres

    doLast {
        //noinspection UnnecessaryQualifiedReference
        groovy.sql.Sql.withInstance(
                "jdbc:postgresql://localhost:${project.ext.pgPort}/postgres",
                'postgres',
                'postgres',
                'org.postgresql.Driver') { groovy.sql.Sql sql ->

            project.fileTree('src/sql').sort().each { file ->
                sql.execute(file.text)
                logger.quiet("Applied $file")
            }
        }
    }
}

task apiTest(type: Test) {
    group "verification"
    description "Runs basic suite that tests API of zq"
    dependsOn startPostgres

    testClassesDirs += sourceSets.apiTests.output.classesDirs
    classpath += sourceSets.apiTests.runtimeClasspath
}

task loadTest(type: Test) {
    group "verification"
    description "Runs load suite that test library under concurrent load"
    dependsOn startPostgres

    testClassesDirs += sourceSets.loadTests.output.classesDirs
    classpath += sourceSets.loadTests.runtimeClasspath
}

test.dependsOn apiTest, loadTest

task performanceTest(type: JavaExec) {
    group "verification"
    description "Runs performance tests, stores results in build "

    main = 'gq.erokhin.zq.test.performance.Runner'
    classpath = sourceSets.performanceTests.runtimeClasspath

    args = ['--chunk-sizes=10,100',
            '--event-sizes=16',
            '--run-time=120',
            '--warm-up-time=30',
            "--pg-port=${project.ext.pgPort}",
            "--output-dir=${project.buildDir}"]
}

gradle.class.classLoader.addURL(
        buildscript.configurations.classpath.find({
            it.name.contains('postgresql')
        }).toURI().toURL()
)